#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var socketIO = require('socket.io');
var dataHolder = require('../logic/Data');

var currentGame = require('../logic/RunGame');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Listening on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);

io.on("connection", socket => {
  console.log("New client connected " + socket.id);
  dataHolder.addSocket(socket.id);

  //Here we listen on a new namespace called "incoming data"
  socket.on("incoming_data", data => {
    //Here we broadcast it out to all other sockets EXCLUDING the socket which sent us the data
    console.log(data + " joined");
    dataHolder.addPlayer(data);
    currentGame.addPlayer(data);
    console.log(dataHolder.getPlayers());
    var players = dataHolder.getPlayers();
    const dataToSend = {
      names: players
    }

    io.sockets.emit("received_data", dataToSend);
    //socket.broadcast.emit("received_data", dataToSend);
  });

  socket.on("starting_game", function () {
    io.sockets.emit("game_started");

    var players = dataHolder.getPlayers();

    currentGame.startgame();

    io.sockets.emit("player_bidding", players[0]);
  });

  /*socket.on("update_dealer", function () {
    var dealer = currentGame.setDealer();
    io.sockets.emit("set_dealer", dealer);
  });*/

  socket.on("current_bidder", name => {
    io.sockets.emit("update_bidder", name);
  })

  socket.on("player_bid", bid => {
    //do bidding logic
    console.log("player bid called")
    var players = dataHolder.getPlayers();

    var bidToSend = currentGame.submitBid(bid);

    if (bid === 0) {
      
    }

    io.sockets.emit("new_bid", bidToSend);

    if(currentGame.checkBiddingComplete()) {
      console.log("entered bidding done");
      currentGame.setHandOrder();
      io.sockets.emit("bidding_complete", bidToSend);
    } else {
      var bidPlayer = currentGame.getNextBidder();
      io.sockets.emit("player_bidding", players[bidPlayer]);
    }

  })

  socket.on("leader_choice", data => {
    currentGame.setChoices(data);
    console.log(data);
    io.sockets.emit("update_choices", data);
  })

  socket.on("card_played", data => {
    currentGame.submitChoice(data);

    var nextPlayer = currentGame.getNextPlayer();

    io.sockets.emit("card_played", data.card);
    io.sockets.emit("player_playing", nextPlayer);
    console.log(data);
  })


  //A special namespace "disconnect" for when a client disconnects
  socket.on("disconnect", () => console.log("Client disconnected"));
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
